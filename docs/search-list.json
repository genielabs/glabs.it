[{"url":"/content/posts/component-based-web-with-zuixjs/","date":"2018-07-19T00:00:00.000Z","title":"Component-based web with <code>zuix.js</code>","description":"Meet zuix.js, a small yet powerful library for component-based web development.","image":"/content/posts/images/component-based-cover.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} ## The beginning When I started to write [zuix.js](https://zuixjs.org), in December 2016, my intention was to re-arrange and create a library out of some code I had written back in 2012 for HomeGenie web UI. *In the picture below you can see the old, but still good, HomeGenie web UI.* ![HomeGenie Web UI](https://genielabs.github.io/HomeGenie/images/docs/dashboard_page_01.jpg) The cool thing about this smart home software is that one can customize and write new widgets by using the integrated web editor (you can read more a"},{"url":"/content/posts/mobile-app-layout-from-scratch/","date":"2018-07-22T00:00:00.000Z","title":"Mobile web app layout from scratch","description":"Create a mobile app layout in 5 minutes (@!?!) =)","image":"/content/posts/images/mobile-app-from-scratch.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} First we add the header bar, with the logo and a menu button. ```html app-logo ``` See the actual code in the `layout` folder of the example below {% zx &#39;glitch&#39; &#39;zuix-app-1&#39; &#39;app&#39; %}{% endzx %} To take some action when the menu button is clicked we &quot;pass&quot; to the `data-ui-options` attribute the `options.menuButton` object which is defined in the `index.js` like this: ```js menuButton: { on: { &#39;menu:open&#39;: function() { // TODO: handle event }, &#39;menu:close&#39;: function() { // T"},{"url":"/content/posts/unique-lovely-web-bits/","date":"2018-07-26T00:00:00.000Z","title":"Unique, lovely web bits","description":"Just about what I was up to yesterday","image":"/content/posts/images/lovely-web-bits.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} Yesterday I wanted to complete the documentation of the animated `hamburger_icon` button used in my previous post. As often happens, documenting things will help to improve them and this will require a few last-minute changes, that in this case were about adding extra options for choosing different burger animations and colors. The result is available [here](https://zuixjs.github.io/zkit/1.0/docs/components/hamburger_icon). But wait a minute... I&#39;ve used this *hamburger_icon* button in all of the 3 example projects on "},{"url":"/content/posts/adding-a-viewpager-to-the-mobile-web-app/","date":"2018-07-29T00:00:00.000Z","title":"Adding a ViewPager to your web app","description":"Meant to be a Twitter mobile clone, ended up in something else.","image":"/content/posts/images/adding-a-viewpager.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} ## What is a ViewPager? As described in *Android Developers* documentation, a *ViewPager* is a &gt; Layout manager that allows the user to flip left and right through pages of data. ## Usage Include `zuix.js` in the `head` section of the page: ```html ``` Add the ViewPager as described below: ```html ``` ## Example application The example app design was initially inspired to *Twitter* mobile but it can be used and adapted as a starting base for different kind of projects. ![Web App 4-1](https://thepracticaldev.s3.amazonaws"},{"url":"/content/posts/web-app-bundling-in-the-browser-with-zuixjs/","date":"2018-08-01T00:00:00.000Z","title":"Web app bundling in the browser with zuix.js","description":"You don't always need build tools to optimize page loading","image":"/content/posts/images/in-browser-bundling.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} ## What is web page/app bundling? Bundling is the process of collecting all resources used in a page and then compiling them into a single, optimized file. This will drastically reduce the number of network requests the browser will have to do to complete the page loading and that will so load the page faster. There are actually two way of doing this: - **In-Browser** bundler: this method does not require any build tool nor plugins, it just works in the browser as-is. - **Web-Starter** bundler: is the [zuix-web-starter](ht"},{"url":"/content/posts/client-side-html-css-preprocessing/","date":"2018-08-07T00:00:00.000Z","title":"Client-side HTML/CSS pre-processing","description":"Using zuix.js global hooks to process content in a detached state.","image":"/content/posts/images/client-side-html-css-preprocessing.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} Client-side *pre-processing* is intended as the task of *transforming* some content or style file before it is actually added to the [DOM](https://www.w3schools.com/js/js_htmldom.asp). There are various scenarios where this &quot;transformation&quot; practice can be useful, just to mention some common uses: - converting [MarkDown](https://www.markdownguide.org/basic-syntax) text to HTML - replacing *Curly Braces* (template variables) with matching variable value - compiling [SCSS, LESS or Stylus](https://htmlmag.com/articl"},{"url":"/content/posts/ready-to-use-progressive-web-app-template/","date":"2018-08-13T00:00:00.000Z","title":"Ready to use Progressive Web App template","description":"Faaast, simple, modern PWA template.","image":"/content/posts/images/progressive-web-app.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} It was supposed to be just part of a series of examples and tutorials, but it turned out to be something good to share as a new open-source product. So, if you did read my previous posts you can see the pattern that brought me to the creation of this *Progressive Web App* template: [zuix-html-pwa on GitHub](https://github.com/zuixjs/zuix-html-pwa) Looks like a real mobile app with the plus of a responsive layout that works well both on a small screen (phone) or a desktop/tablet screen. Those familiar with *Android* and *Ma"},{"url":"/content/posts/netflix-clone-web-app-template/","date":"2018-08-20T00:00:00.000Z","title":"Netflix clone web app template (PWA)","description":"Yet another Progressive Web App","image":"/content/posts/images/webflix-clone-cover.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} I&#39;ve spent some time in the last two days developing a new web app template and I wanted to share it here. {% yt &#39;Y6FhQNHlpco&#39; %} Source code and documentation are as usual available on GitHub: https://github.com/zuixjs/zuix-web-flix and here is the [LIVE DEMO](https://zuixjs.github.io/zuix-web-flix/). So, I hope you like this template and if you have a suggestion for improving it or for what I should make next, please feel free to leave a comment =)"},{"url":"/content/posts/adding-gesture-based-interaction-to-your-site/","date":"2018-08-31T00:00:00.000Z","title":"Adding gesture-based interaction to your website","description":"Gesture helper that can be used on any element to detect gestures over it.","image":"/content/posts/images/add-gesture-detection-cover.jpg","content":"{% include &#39;fragments/zuixjs-deprecated-content-notice.html&#39; %} One of the common problems with desktop and mobile development is that, except for the &#39;click&#39; event, mouse events will not work on mobile and since they are touch-based devices, a different set of events must be used. **Common mouse events** - mousedown - mousemove - mouseup **Common touch events** - touchstart - touchmove - touchend So, to implement custom interaction in a website that works both on desktop and mobile, it will require taking care of both mouse and touch events. And this can get even worse if we c"},{"url":"/content/works/","content":"{% include &#39;./index_list&#39; %}"},{"url":"/content/museum/","content":"# Museum (pics) // TODO: ...."}]